diff '--color=auto' -pruN dockapps-be3f170.orig/configure.ac wmtop/configure.ac
--- dockapps-be3f170.orig/configure.ac	2024-10-20 19:33:49.674747081 +0300
+++ wmtop/configure.ac	2024-04-20 06:22:24.695907788 +0300
@@ -1,4 +1,4 @@
-AC_INIT([wmtop], [0.85], [wmaker-dev@lists.windowmaker.org])
+AC_INIT([wmtop], [0.85], [wmaker-dev@googlegroups.com])
 AM_INIT_AUTOMAKE([foreign subdir-objects])
 AC_CONFIG_SRCDIR([configure.ac])
 AC_CANONICAL_HOST
diff '--color=auto' -pruN dockapps-be3f170.orig/wmtop.1 wmtop/wmtop.1
--- dockapps-be3f170.orig/wmtop.1	2024-10-20 19:33:49.674747081 +0300
+++ wmtop/wmtop.1	2025-01-01 19:03:10.572194065 +0200
@@ -22,7 +22,7 @@ either via the command line or by clicki
 
 .SH OPTIONS
 While running a left click alternates between CPU and memory
-display. A right click launches the application specfied at the
+display. A right click launches the application specified at the
 command line. Middle clicking changes between displaying all
 and user only processes.
 .TP
@@ -48,16 +48,16 @@ Exclude processes whose name matches the
 expression need only match part of the process name. Use '^' to mean the start
 of the name and '$' to mean the end.
 .TP
-.B \-m 
+.B \-m
 Show memory usage rather than CPU usage on start-up.
 .TP
 .B \-a \fItheme
 Choose an artisitc style or theme for wmtop to use.
 .TP
-.B \-s 
+.B \-s
 Set interval between process samples in milliseconds.
 .TP
-.B \-r 
+.B \-r
 Set interval between screen updates in milliseconds.
 
 .SH EXAMPLES
Binary files dockapps-be3f170.orig/.wmtop.1.un~ and wmtop/.wmtop.1.un~ differ
diff '--color=auto' -pruN dockapps-be3f170.orig/wmtop.c wmtop/wmtop.c
--- dockapps-be3f170.orig/wmtop.c	2024-10-20 19:33:49.674747081 +0300
+++ wmtop/wmtop.c	2024-04-20 06:22:24.695907788 +0300
@@ -6,7 +6,7 @@
  * wmtop.c -- WindowMaker process view dock app
  * Derived by Dan Piponi dan@tanelorn.demon.co.uk
  * http://www.tanelorn.demon.co.uk
- * http://wmtop.sourceforge.net 
+ * http://wmtop.sourceforge.net
  * from code originally contained in wmsysmon by Dave Clark (clarkd@skynet.ca)
  * This software is licensed through the GNU General Public License.
  */
@@ -508,16 +508,13 @@ int process_parse_procfs(struct process
      * Extract cpu times from data in /proc filesystem.
      * For conversion types see man proc(5).
      */
-    rc = sscanf(line,"%*s %s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %lu %lu %*s %*s %*s %*s %*s %*s %*s %lu %ld",
+    rc = sscanf(line,"%*s (%[^)]) %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %*s %lu %lu %*s %*s %*s %*s %*s %*s %*s %lu %ld",
 	    procname,
 	    &process->user_time,&process->kernel_time,
 	    &process->vsize,&process->rss);
     if (rc<5)
 	return 1;
-    /*
-     * Remove parentheses from the process name stored in /proc/ under Linux...
-     */
-    r = procname+1;
+    r = procname;
     /* remove any "kdeinit: " */
     if (r == strstr(r, "kdeinit"))
      {
@@ -546,7 +543,7 @@ int process_parse_procfs(struct process
       line[endl]=0;
       /* account for "kdeinit: " */
       if ((char*)line == strstr(line, "kdeinit: "))
-        r = ((char*)line)+9; 
+        r = ((char*)line)+9;
       else
         r = (char*)line;
 
@@ -559,7 +556,7 @@ int process_parse_procfs(struct process
     else
     {
       q = deparenthesised_name;
-      while (*r && *r!=')')
+      while (*r)
         *q++ = *r++;
        *q = 0;
     }
@@ -574,7 +571,7 @@ int process_parse_procfs(struct process
      * Extract cpu times from data in /proc/<pid>/stat
      * XXX: Process name extractor for FreeBSD is untested right now.
      *
-     * [TODO: FREEBSD code probably needs similar data type changes to 
+     * [TODO: FREEBSD code probably needs similar data type changes to
      * those made for LINUX above. Need to check docs.			-wbk]
      */
     rc = sscanf(line,"%s %*s %*s %*s %*s %*s %*s %*s %d,%d %d,%d",
@@ -746,7 +743,7 @@ void draw_processes() {
     ++g_time;
 
     update_process_table();
-    
+
     switch (mode) {
     case 0:
 	total = calc_cpu_total();
@@ -954,8 +951,8 @@ void blit_string(char *name, int x, int
 
     k = x;
     for ( i = 0; name[i]; i++) {
-	c = toupper(name[i]); 
-	if (c >= 'A' && c <= 'J') {   
+	c = toupper(name[i]);
+	if (c >= 'A' && c <= 'J') {
 	    c -= 'A';
 	    copyXPMArea(c*6,73,6,7,k,y);
 	} else if (c>='K' && c<='T') {
@@ -964,7 +961,7 @@ void blit_string(char *name, int x, int
 	} else if (c>='U' && c<='Z') {
 	    c -= 'U';
 	    copyXPMArea(c*6,89,6,7,k,y);
-	} else if (c>='0' && c<='9') { 
+	} else if (c>='0' && c<='9') {
 	    c -= '0';
 	    copyXPMArea(c*6,65,6,7,k,y);
 	} else {
